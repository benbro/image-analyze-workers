[{"/home/wataru/ssd1/git_work/image-analyze-workers/010demo_modnet-worker-js-demo/src/index.tsx":"1","/home/wataru/ssd1/git_work/image-analyze-workers/010demo_modnet-worker-js-demo/src/reportWebVitals.ts":"2","/home/wataru/ssd1/git_work/image-analyze-workers/010demo_modnet-worker-js-demo/src/App.tsx":"3","/home/wataru/ssd1/git_work/image-analyze-workers/010demo_modnet-worker-js-demo/src/DemoBase.tsx":"4"},{"size":500,"mtime":1608526103815,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1608526103815,"results":"7","hashOfConfig":"6"},{"size":5182,"mtime":1608571217096,"results":"8","hashOfConfig":"6"},{"size":18153,"mtime":1608526227220,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"u7lt4c",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/wataru/ssd1/git_work/image-analyze-workers/010demo_modnet-worker-js-demo/src/index.tsx",[],["20","21"],"/home/wataru/ssd1/git_work/image-analyze-workers/010demo_modnet-worker-js-demo/src/reportWebVitals.ts",[],"/home/wataru/ssd1/git_work/image-analyze-workers/010demo_modnet-worker-js-demo/src/App.tsx",["22"],"import './App.css';\nimport DemoBase, { ControllerUIProp } from './DemoBase';\nimport { generateDefaultMODNetParams, generateMODNetDefaultConfig, MODNetWorkerManager } from '@dannadori/modnet-worker-js'\n\nclass App extends DemoBase {\n  manager:MODNetWorkerManager = new MODNetWorkerManager()\n  canvas = document.createElement(\"canvas\")\n\n  config = (()=>{\n    const c = generateMODNetDefaultConfig()\n    c.useTFWasmBackend = true\n    // c.wasmPath = \"\"\n    c.modelPath=\"/modnet/model.json\"\n    return c\n  })()\n  params = (()=>{\n    const p = generateDefaultMODNetParams()\n    p.processHeight=512\n    p.processWidth=512\n    return p\n  })()\n\n  getCustomMenu = () => {\n    const menu: ControllerUIProp[] = [\n      {\n        title: \"processOnLocal\",\n        currentIndexOrValue: 1,\n        values: [\"on\", \"off\"],\n        callback: (val: string | number | MediaStream) => { },\n      },\n      {\n        title: \"modelPath\",\n        currentIndexOrValue: 0,\n        displayLabels:[\"u2net192\", \"u2net256\", \"u2net320\", \"u2net512\", \"u2net1024\"],\n        values: [\"/u2net-portrait_192/model.json\", \"/u2net-portrait_256/model.json\", \"/u2net-portrait_320/model.json\", \"/u2net-portrait_512/model.json\", \"/u2net-portrait_1024/model.json\"],\n        callback: (val: string | number | MediaStream) => {\n        },\n      },\n      {\n        title: \"useTFWasmBackend\",\n        currentIndexOrValue: 0,\n        values: [\"on\", \"off\"],\n        callback: (val: string | number | MediaStream) => { },\n      },\n      {\n        title: \"reload model\",\n        currentIndexOrValue: 0,\n        callback: (val: string | number | MediaStream) => {\n          const processOnLocal = this.controllerRef.current!.getCurrentValue(\"processOnLocal\")\n          this.config.processOnLocal     = (processOnLocal === \"on\" ? true  : false) as boolean\n          const useTFWasmBackend = this.controllerRef.current!.getCurrentValue(\"useTFWasmBackend\")\n          this.config.useTFWasmBackend   = (useTFWasmBackend === \"on\" ? true  : false) as boolean\n          this.config.modelPath = this.controllerRef.current!.getCurrentValue(\"modelPath\") as string  \n\n\n          const path = this.config.modelPath\n          if(path.indexOf(\"192\") > 0){\n            this.params.processWidth = 192\n            this.params.processHeight = 192\n          }else if(path.indexOf(\"256\") > 0){\n            this.params.processWidth = 256\n            this.params.processHeight = 256\n          }else if(path.indexOf(\"320\") > 0){\n            this.params.processWidth = 320\n            this.params.processHeight = 320\n          }else if(path.indexOf(\"512\") > 0){\n            this.params.processWidth = 512\n            this.params.processHeight = 512\n          }else if(path.indexOf(\"1024\") > 0){\n            this.params.processWidth = 1024\n            this.params.processHeight = 1024\n          }          \n\n\n          this.requireReload()\n        },\n      },\n    ]\n    return menu\n  }\n\n\n\n  drawSegmentation = (prediction: number[][]) => {\n    this.canvas.width = prediction[0].length\n    this.canvas.height = prediction.length\n    const imageData = this.canvas.getContext(\"2d\")!.getImageData(0, 0, this.canvas.width, this.canvas.height)\n    const data = imageData.data\n    for (let rowIndex = 0; rowIndex < this.canvas.height; rowIndex++) {\n      for (let colIndex = 0; colIndex < this.canvas.width; colIndex++) {\n        const seg_offset = ((rowIndex * this.canvas.width) + colIndex)\n        const pix_offset = ((rowIndex * this.canvas.width) + colIndex) * 4\n        if(prediction[rowIndex][colIndex] > 0.000){\n\n          data[pix_offset + 0] = prediction[rowIndex][colIndex] *255\n          data[pix_offset + 1] = prediction[rowIndex][colIndex] *255\n          data[pix_offset + 2] = prediction[rowIndex][colIndex] *255\n          data[pix_offset + 3] = 255 - prediction[rowIndex][colIndex] *255\n          // data[pix_offset + 3] = 255\n\n          // data[pix_offset + 0] = 0\n          // data[pix_offset + 1] = 0\n          // data[pix_offset + 2] = 0\n          // data[pix_offset + 3] = 0\n        }else{\n          data[pix_offset + 0] = 0\n          data[pix_offset + 1] = 0\n          data[pix_offset + 2] = 0\n          data[pix_offset + 3] = 255\n          // data[pix_offset + 0] = 0\n          // data[pix_offset + 1] = 0\n          // data[pix_offset + 2] = 0\n          // data[pix_offset + 3] = 255  \n        }\n      }\n    }\n    const imageDataTransparent = new ImageData(data, this.canvas.width, this.canvas.height);\n    this.canvas.getContext(\"2d\")!.putImageData(imageDataTransparent, 0, 0)\n\n    this.resultCanvasRef.current!.width = this.originalCanvas.current!.width\n    this.resultCanvasRef.current!.height = this.originalCanvas.current!.height\n    const ctx = this.resultCanvasRef.current!.getContext(\"2d\")!\n    ctx.drawImage(this.originalCanvas.current!, 0, 0, this.originalCanvas.current!.width, this.originalCanvas.current!.height)\n    ctx.drawImage(this.canvas, 0, 0, this.resultCanvasRef.current!.width, this.resultCanvasRef.current!.height)\n  }\n\n  count = 0\n  handleResult = (prediction: any) => {\n    console.log(prediction)\n    this.drawSegmentation(prediction)\n  }\n\n  componentDidMount(){\n\n    super.componentDidMount()\n  }\n}\n\n\nexport default App;\n","/home/wataru/ssd1/git_work/image-analyze-workers/010demo_modnet-worker-js-demo/src/DemoBase.tsx",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":91,"column":15,"nodeType":"29","messageId":"30","endLine":91,"endColumn":25},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"@typescript-eslint/no-unused-vars","'seg_offset' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]